// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package crudproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	Import(ctx context.Context, opts ...grpc.CallOption) (RPC_ImportClient, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*Response, error)
	Upsert(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*Response, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Import(ctx context.Context, opts ...grpc.CallOption) (RPC_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[0], "/crudproto.RPC/Import", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCImportClient{stream}
	return x, nil
}

type RPC_ImportClient interface {
	Send(*Entity) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type rPCImportClient struct {
	grpc.ClientStream
}

func (x *rPCImportClient) Send(m *Entity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCImportClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/crudproto.RPC/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Get(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/crudproto.RPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Upsert(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/crudproto.RPC/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) Delete(ctx context.Context, in *PkRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/crudproto.RPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	Import(RPC_ImportServer) error
	List(context.Context, *ListRequest) (*Response, error)
	Get(context.Context, *PkRequest) (*Response, error)
	Upsert(context.Context, *Entity) (*Response, error)
	Delete(context.Context, *PkRequest) (*Response, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) Import(RPC_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedRPCServer) List(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRPCServer) Get(context.Context, *PkRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRPCServer) Upsert(context.Context, *Entity) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedRPCServer) Delete(context.Context, *PkRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).Import(&rPCImportServer{stream})
}

type RPC_ImportServer interface {
	SendAndClose(*Response) error
	Recv() (*Entity, error)
	grpc.ServerStream
}

type rPCImportServer struct {
	grpc.ServerStream
}

func (x *rPCImportServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCImportServer) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crudproto.RPC/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crudproto.RPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Get(ctx, req.(*PkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crudproto.RPC/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Upsert(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crudproto.RPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Delete(ctx, req.(*PkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crudproto.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RPC_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RPC_Get_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _RPC_Upsert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RPC_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Import",
			Handler:       _RPC_Import_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "crud.proto",
}
